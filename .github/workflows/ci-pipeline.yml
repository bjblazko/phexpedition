name: Continuous Integration

on:
  #workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:

  #
  # Validate and compile
  #
  maven-validate:

    name: Validate and build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Verify with Maven
        run: mvn -B clean compile -DskipTests=true --file pom.xml


  #
  # Run unit tests
  #
  maven-test:

    name: Run (unit) tests
    runs-on: ubuntu-latest

    needs: maven-validate

    steps:
    - uses: actions/checkout@v3
    - name: Set up Java and Maven
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Run tests with Maven
      run: mvn -B test --file pom.xml


  #
  # QA: Sonarqube (sonarcloud.io)
  #
  maven-sonarqube:

    name: Sonarqube code analysis
    runs-on: ubuntu-latest

    needs: maven-validate

    steps:
      - uses: actions/checkout@v3
      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Run code analysis through Sonarqube with Maven
        run: mvn -B verify sonar:sonar -DskipTests=true --file pom.xml -Pcoverage -Dsonar.login=${{ secrets.SONAR_TOKEN }}


  containerize:

    name: Container image
    runs-on: ubuntu-latest

    needs: [maven-test, maven-sonarqube]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build
        run: mvn package -DskipTests=true
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and publish Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: bjblazko/phexpedition-app:latest


  #
  # Deploy to test
  # Will build container image from sources using Build Packs.
  # The image then is provided to be picket up by other stages.
  #
  deploy-test:

    name: Cloud build & deploy to Test
    runs-on: ubuntu-latest

    needs: [containerize]

    environment:
      name: Test
      url: ${{ vars.SERVICE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up GCP project and credentials
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GOOGLE_PROJECT }}
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_KEY }}
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ vars.SERVICE_NAME }} \
            --image docker.io/bjblazko/phexpedition-app:latest \
            --region ${{ vars.GOOGLE_REGION }} \
            --allow-unauthenticated \
            --service-account appuser@${{ vars.GOOGLE_PROJECT }}.iam.gserviceaccount.com \
            --set-env-vars 'AUTH_REDIRECT_URI=${{ vars.SERVICE_URL }}' \
            --set-secrets 'AUTH_CLIENT_ID=AUTH_CLIENT_ID:latest'


  #
  # Deploy to staging
  # Will re-use container image built in deployment to 'test'
  #
  deploy-staging:

    name: Deploy to Staging
    runs-on: ubuntu-latest

    environment:
      name: Staging
      url: ${{ vars.SERVICE_URL }}

    needs: [deploy-test]

    steps:
      - name: Set up GCP project and credentials
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GOOGLE_PROJECT }}
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_KEY }}
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ vars.SERVICE_NAME }} \
            --image docker.io/bjblazko/phexpedition-app:latest \
            --region ${{ vars.GOOGLE_REGION }} \
            --allow-unauthenticated \
            --service-account appuser@${{ vars.GOOGLE_PROJECT }}.iam.gserviceaccount.com \
            --set-env-vars AUTH_REDIRECT_URI=${{ vars.SERVICE_URL }} \
            --set-secrets AUTH_CLIENT_ID=AUTH_CLIENT_ID:latest


  #
  # Deploy to production
  # Will re-use container image built in deployment to 'test'
  #
  deploy-prod:

    name: Deploy to PRODUCTION
    runs-on: ubuntu-latest

    environment:
      name: Prod
      url: ${{ vars.SERVICE_URL }}

    needs: [deploy-test]

    steps:
      - name: Set up GCP project and credentials
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GOOGLE_PROJECT }}
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_KEY }}
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ vars.SERVICE_NAME }} \
            --image docker.io/bjblazko/phexpedition-app:latest \
            --region ${{ vars.GOOGLE_REGION }} \
            --allow-unauthenticated \
            --service-account appuser@${{ vars.GOOGLE_PROJECT }}.iam.gserviceaccount.com \
            --set-env-vars AUTH_REDIRECT_URI=${{ vars.SERVICE_URL }} \
            --set-secrets AUTH_CLIENT_ID=AUTH_CLIENT_ID:latest
